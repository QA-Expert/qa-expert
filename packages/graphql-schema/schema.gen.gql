# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Answer implements Base {
  answer: String!
  id: String!
  quizPageId: String!
  userId: String!
}

input AnswerInput {
  answer: String!
  quizPageId: String!
  userId: String!
}

interface Base {
  id: String!
}

interface BaseContnet implements Base {
  desciption: String!
  id: String!
  title: String!
}

type Cours implements Base & BaseContnet {
  coursPages: [CoursPage!]!
  desciption: String!
  icon: String!
  id: String!
  quizzes: [Quiz!]!
  title: String!
}

type CoursPage implements Base & BaseContnet {
  content: String!
  desciption: String!
  id: String!
  title: String!
}

type CoursProgress implements Base {
  coursId: String!
  coursPageId: String!
  id: String!
  userId: String!
}

input CoursProgressInput {
  coursId: String!
  coursPageId: String!
  userId: String!
}

type Mutation {
  createAnswer(data: AnswerInput!): Answer!
  createCoursProgress(data: CoursProgressInput!): CoursProgress!
  createQuizProgress(data: QuizProgressInput!): QuizProgress!
}

type Query {
  answer(quizPageId: String!, userId: String!): Answer!
  cours(id: String!): Cours!
  coursProgresses(coursId: String!, userId: String!): [CoursProgress!]!
  courses: [Cours!]!
  login(data: UserInputLogin!): UserOutputLogin!
  quiz(id: String!): Quiz!
  quizProgresses(quizId: String!, userId: String!): [QuizProgress!]!
  quizzes: [Quiz!]!
  userByEmail(email: String!): User!
  userById(id: String!): User!
}

type Question implements Base {
  content: String!
  expectedResult: String!
  id: String!
}

type Quiz implements Base & BaseContnet {
  courses: [Cours!]!
  desciption: String!
  expectedResult: String!
  id: String!
  quizPages: [QuizPage!]!
  title: String!
  type: QuizType!
}

type QuizPage implements Base & BaseContnet {
  desciption: String!
  expectedResult: String!
  id: String!
  questions: [Question!]!
  title: String!
}

"""
Defines whether User passed or failed or just visited current quiz page
"""
enum QuizPageProgressState {
  FAIL
  PASS
  VISITED
}

type QuizProgress implements Base {
  id: String!
  quizId: String!
  quizPageId: String!
  state: QuizPageProgressState!
  userId: String!
}

input QuizProgressInput {
  quizId: String!
  quizPageId: String!
  state: QuizPageProgressState!
  userId: String!
}

"""Defines different type of quizzes platform could have"""
enum QuizType {
  PRACTICE
  QUESTIONEER
}

type User implements Base {
  email: String!
  firstName: String!
  id: String!
  lastName: String!
}

input UserInputLogin {
  email: String!
  password: String!
}

type UserOutputLogin {
  access_token: String!
  email: String!
}