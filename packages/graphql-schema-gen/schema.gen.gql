# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Answer {
  _id: String!
  content: String!
}

type Badge {
  _id: String!
  course: Course
  description: String!
  icon: String!
  link: String!
  title: String!
}

type Course {
  _id: String!
  badge: Badge
  description: String!
  icon: String!
  pages: [Page!]!
  progress: ProgressPercentage!
  title: String!
  type: CourseType!
}

input CoursePageContentInput {
  content: String!
}

input CoursePageInput {
  content: String!
  description: String!
  title: String!
}

input CoursePageProgressInput {
  page: String!
}

"""Defines the type of the course"""
enum CourseType {
  COURSE
  QUIZ
}

type Mutation {
  addPage(_id: String!, pageId: String!): Course!
  claimBadge(badgeId: String!): User!
  createCoursePage(data: CoursePageInput!): Page!
  createCoursePageProgress(data: CoursePageProgressInput!): PageProgress!
  createQuizPage(data: QuizPageInput!): Page!
  createQuizPageProgress(data: QuizPageProgressInput!): PageProgress!
  forgotPassword(email: String!): Boolean!
  login(data: UserInputLogin!): UserOutputLogin!
  logout: Boolean!
  register(data: UserInputCreate!): UserOutputLogin!
  resetPassword(data: ResetPasswordInput!): User!
  updateCoursePageContent(_id: String!, data: CoursePageContentInput!): Page!
  updateUserNames(data: UserInputUpdateNames!): User!
  updateUserPassword(data: UserInputUpdatePassword!): User!
}

type Page {
  _id: String!
  content: String
  description: String!
  progress: PageProgress
  question: Question
  title: String!
  type: CourseType!
}

type PageProgress {
  _id: String!
  answers: [String!]
  page: String!
  state: PageProgressState!
  type: CourseType!
  user: String!
}

"""Defines whether User passed or failed or just visited current page"""
enum PageProgressState {
  FAIL
  PASS
}

type ProgressPercentage {
  fail: Float!
  pass: Float!
}

type Query {
  badges: [Badge!]!
  course(_id: String!): Course!
  courses: [Course!]!
  user: User!
}

type Question {
  _id: String!
  answers: [Answer!]!
  content: String!
  options: [Answer!]!
}

input QuizPageInput {
  description: String!
  question: String!
  title: String!
}

input QuizPageProgressInput {
  answers: [String!]!
  page: String!
  state: PageProgressState!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

type User {
  _id: String!
  badges: [String!]
  email: String!
  firstName: String
  lastName: String
  roles: [String!]!
}

interface UserBaseModel {
  _id: String!
  email: String!
  firstName: String
  lastName: String
}

input UserInputCreate {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

input UserInputLogin {
  email: String!
  password: String!
}

input UserInputUpdateNames {
  firstName: String
  lastName: String
}

input UserInputUpdatePassword {
  newPassword: String!
  oldPassword: String!
}

type UserOutputLogin implements UserBaseModel {
  _id: String!
  access_token: String!
  email: String!
  firstName: String
  lastName: String
}