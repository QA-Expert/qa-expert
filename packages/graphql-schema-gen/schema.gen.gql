# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Answer implements Base {
  content: String!
  id: String!
}

interface Base {
  id: String!
}

interface BaseContent implements Base {
  description: String!
  id: String!
  title: String!
}

type Course implements Base & BaseContent {
  coursePages: [CoursePage!]!
  description: String!
  icon: String!
  id: String!
  quizzes: [Quiz!]!
  title: String!
}

type CoursePage implements Base & BaseContent {
  content: String!
  description: String!
  id: String!
  title: String!
}

type CourseProgress implements Base {
  courseId: String!
  coursePageId: String!
  id: String!
  userId: String!
}

input CourseProgressInput {
  courseId: String!
  coursePageId: String!
  userId: String!
}

type Mutation {
  createCourseProgress(data: CourseProgressInput!): CourseProgress!
  createQuizProgress(data: QuizProgressInput!): QuizProgress!
  login(data: UserInputLogin!): UserOutputLogin!
  logout: Boolean!
  register(data: UserInputCreate!): UserOutputLogin!
}

type Query {
  course(id: String!): Course!
  courseProgresses(courseId: String!): [CourseProgress!]!
  courses: [Course!]!
  quiz(id: String!): Quiz!
  quizzes: [Quiz!]!
  user: User!
}

type Question implements Base {
  answers: [Answer!]!
  content: String!
  id: String!
  options: [Answer!]!
}

type Quiz implements Base & BaseContent {
  courses: [Course!]!
  description: String!
  expectedResult: String!
  icon: String!
  id: String!
  quizPages: [QuizPage!]!
  title: String!
  type: QuizType!
}

type QuizPage implements Base & BaseContent {
  description: String!
  id: String!
  progresses(id: String!): [QuizProgress!]!
  question: Question!
  title: String!
}

"""
Defines whether User passed or failed or just visited current quiz page
"""
enum QuizPageProgressState {
  FAIL
  PASS
  VISITED
}

type QuizProgress implements Base {
  answerIds: [String!]!
  id: String!
  quizId: String!
  quizPageId: String!
  state: QuizPageProgressState!
  userId: String!
}

input QuizProgressInput {
  answerIds: [String!]
  quizId: String!
  quizPageId: String!
  state: QuizPageProgressState!
  userId: String
}

"""Defines different type of quizzes platform could have"""
enum QuizType {
  PRACTICE
  QUESTIONEER
}

type User implements Base {
  email: String!
  firstName: String
  id: String!
  lastName: String
}

interface UserBaseModel {
  email: String!
  firstName: String
  lastName: String
}

input UserInputCreate {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

input UserInputLogin {
  email: String!
  password: String!
}

type UserOutputLogin implements UserBaseModel {
  access_token: String!
  email: String!
  firstName: String
  lastName: String
}